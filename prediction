#!/usr/bin/env python

import parse
import modeltraining
import sys
import numpy as np
from sklearn.metrics import classification_report
from Bio import SeqIO


def countAA(listAA,seq,nToCount):
        features = []
        for AA in listAA:
                features += [seq[0:nToCount].count(AA)]
        return features

def get_features(sequence,nToCount):
        listAA = ['A','R', 'N', 'D', 'C', 'E', 'Q', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S','T','W', 'Y', 'V']
        return countAA(listAA,sequence,nToCount)

def build_sets(data, nToCount):
	X_train = []
	y_train = []
	X_test = []
	y_test = []
	for sample in data:
		if sample['isTraining'] == 'y':
			X_train += [get_features(sample['sequence'],nToCount)]
			y_train += [sample['label']]
		else :
			X_test += [get_features(sample['sequence'],nToCount)]
			y_test += [sample['label']]
	return np.array(X_train), np.array(y_train), np.array(X_test), np.array(y_test)

def testDifferentLength(startLength,endLength,step,data):
        i = startLength
        l = []
        r = []
        while i <= endLength:
                X_train, y_train, X_test, y_test = build_sets(data,i)
                model = modeltraining.best_model(X_train, y_train)
                r = [i,model.score(X_test,y_test)]
                print r
                l += [r]
                i += step
        return l
                

def testProteome(model,proteome):
        f = ""
        if proteome == 'sacc':
                f = 'data/proteomes/Saccharomyces_cerevisiae.R64-1-1.pep.all.fa'
        else:
                print "Incorrect proteome chosen. Default proteome loaded : saccharomyces"
                f = 'data/proteomes/Saccharomyces_cerevisiae.R64-1-1.pep.all.fa'
        l = []
        with open(f, 'r') as fhandle:
                for record in SeqIO.parse(fhandle,"fasta"):
                        l += [get_features(str(record.seq),19)]
        predict = model.predict(l)
        nP = 0
        nN = 0
        err = 0
        for e in predict:
                if (e == 'p'):
                        nP += 1
                elif  (e == 'n'):
                        nN += 1
                else:
                        err += 1
        print("Number of positive : " + str(nP))
        print("Number of negative : " + str(nN))
        print("Errors : " + str(err))
                                        
                                        
                
if __name__ == '__main__':
        
	if len(sys.argv) <= 1 or sys.argv[1] not in ["tm","nontm","all"]:
	    sys.stderr.write("You need to choose a correct mode :\ntm\nnontm\nall\n")
	    sys.exit("Script exited with error")
	
	else:
	    mode = sys.argv[1]
	    if len(sys.argv) == 2:
	        print ("Default training proportion chosen : 0.7")
	        trainingProportion = 0.7
	    else:    
	        trainingProportion = float(sys.argv[2])
	        if not (trainingProportion <= 1.0 and trainingProportion >= 0):
	            sys.stderr.write("The proportion should be between 0 and 1\n")
	            sys.exit("Script exited with error")

	    data = parse.accessFolders(mode, trainingProportion)
        #print(testDifferentLength(18,22,1,data))
        X_train, y_train, X_test, y_test = build_sets(data,19)
        model = modeltraining.best_model(X_train, y_train)
        print model.score(X_test,y_test)
                              


            #print(testDifferentLength(18,22,1,data))
            X_train, y_train, X_test, y_test = build_sets(data,19)
            model = modeltraining.best_model(X_train, y_train)
            print model.score(X_test,y_test)
            testProteome(model,'sacc')
                
                
            #print model.best_params_
	    # y_true, y_pred = y_test, model.predict(X_test)
    	# print classification_report(y_true, y_pred)
    	#print model.score(X_test,y_test)
       
